package.lisp~:   #:mat-expr
package.lisp~:   #:mat-diag
package.lisp~:   #:mat-expr-t
package.lisp~:   #:mat-expr-s
package.lisp~:   #:mat-eye
package.lisp~:   #:mat-ones
package.lisp~:   #:mat-value
package.lisp~:   #:mat-type
package.lisp~:   #:mat-typed
package.lisp~:   #:mat-zeros
package.lisp~:   #:mat-size
types.lisp:(defctype mat-expr :pointer)
examples/assgn-val.html:         (mat (mat-ones 640 480 +8uc3+))
examples/assgn-val.html:    (format t "IMAGE type = ~a(+8UC3+)" (mat-type image))
examples/copy-to.html:         (mat-1 (mat-data 2 2 +32s+ data))
examples/copy-to.html:         (mat-2 (mat-data 2 2 +32s+ data))
examples/copy-to.html:         (mask (mat-eye 2 2 +8u+)))
examples/copy-to.html:    (copy-to mat-1 m-1)
examples/copy-to.html:    (dotimes (i (rows mat-1))
examples/copy-to.html:      (dotimes (j (cols mat-1))
examples/copy-to.html:	(format t "~a" (at-int mat-1 i j))
examples/copy-to.html:    (copy-to mat-2 m-2 mask)
examples/copy-to.html:    (dotimes (i (rows mat-2))
examples/copy-to.html:      (dotimes (j (cols mat-2))
examples/copy-to.html:	(format t "~a" (at-int mat-2 i j))
package.lisp:   #:mat-expr
package.lisp:   #:mat-diag
package.lisp:   #:mat-expr-t
package.lisp:   #:mat-expr-s
package.lisp:   #:mat-eye
package.lisp:   #:mat-ones
package.lisp:   #:mat-value
package.lisp:   #:mat-type
package.lisp:   #:mat-typed
package.lisp:   #:mat-zeros
package.lisp:   #:mat-size
types:(defctype mat-expr :pointer)
vector.lisp~:(defcfun ("std_vectormToCArray" %vector-mat-to-c-array) :pointer 
types~:(defctype mat-expr :pointer)
core.lisp~:(defcfun ("promote" <<) (:pointer mat-expr)
core.lisp~:  (expr (:pointer mat-expr)))
core.lisp~:(defcfun ("cv_Mat_add" add) (:pointer mat-expr)
core.lisp~:(defcfun ("cv_Mat_div" div) (:pointer mat-expr)
core.lisp~:  (expr (:pointer mat-expr)))
core.lisp~:(defcfun ("cv_create_Mat_with_data" mat-data) (:pointer mat)
core.lisp~:(defcfun ("cv_Mat_transpose_mat" mat-expr-t)  (:pointer mat-expr)
core.lisp~:(defcfun ("cv_create_identity" mat-eye3) (:pointer mat)
core.lisp~:(defcfun ("cv_create_sized_identity" mat-eye2)  (:pointer mat)
core.lisp~:(defun mat-eye (&rest args)
core.lisp~:	      (mat-eye3 (first args) (second args) (third args)))
core.lisp~:	       (mat-eye2 (first args) (second args)))))
core.lisp~:(defcfun ("cv_create_ones" mat-ones) (:pointer mat)
core.lisp~:(defcfun ("cv_Mat_size" mat-size) (:pointer size)
core.lisp~:(defcfun ("cv_Mat_scale" scale) (:pointer mat-expr)
core.lisp~:  (m (:pointer mat-expr))
core.lisp~:(defcfun ("cv_Mat_type" mat-type) :int
core.lisp~:(defcfun ("cv_create_Mat_typed" mat-typed)  (:pointer mat)
core.lisp~:(defcfun ("cv_create_Mat_with_value" mat-value) (:pointer mat)
core.lisp~:(defcfun ("cv_create_zeros" mat-zeros) (:pointer mat)
core.lisp~:(defcfun ("cv_Mat_mult" mul) (:pointer mat-expr)
core.lisp~:(defcfun ("promote" promote) (:pointer mat-expr)
core.lisp~:		 ((pointerp arg1) (mat-size arg1))
core.lisp~:(defcfun ("cv_Mat_sub" sub) (:pointer mat-expr)
core.lisp:(defcfun ("promote" <<) (:pointer mat-expr)
core.lisp:  (expr (:pointer mat-expr)))
core.lisp:(defcfun ("cv_Mat_add" add) (:pointer mat-expr)
core.lisp:(defcfun ("cv_Mat_div" div) (:pointer mat-expr)
core.lisp:  (expr (:pointer mat-expr)))
core.lisp:(defcfun ("cv_create_Mat_with_data" mat-data) (:pointer mat)
core.lisp:(defcfun ("cv_Mat_transpose_mat" mat-expr-t)  (:pointer mat-expr)
core.lisp:(defcfun ("cv_create_identity" mat-eye3) (:pointer mat)
core.lisp:(defcfun ("cv_create_sized_identity" mat-eye2)  (:pointer mat)
core.lisp:(defun mat-eye (&rest args)
core.lisp:	      (mat-eye3 (first args) (second args) (third args)))
core.lisp:	       (mat-eye2 (first args) (second args)))))
core.lisp:(defcfun ("cv_create_ones" mat-ones) (:pointer mat)
core.lisp:(defcfun ("cv_Mat_size" mat-size) (:pointer size)
core.lisp:(defcfun ("cv_Mat_scale" scale) (:pointer mat-expr)
core.lisp:  (m (:pointer mat-expr))
core.lisp:(defcfun ("cv_Mat_type" mat-type) :int
core.lisp:(defcfun ("cv_create_Mat_typed" mat-typed)  (:pointer mat)
core.lisp:(defcfun ("cv_create_Mat_with_value" mat-value) (:pointer mat)
core.lisp:(defcfun ("cv_create_zeros" mat-zeros) (:pointer mat)
core.lisp:(defcfun ("cv_Mat_mult" mul) (:pointer mat-expr)
core.lisp:(defcfun ("promote" promote) (:pointer mat-expr)
core.lisp:		 ((pointerp arg1) (mat-size arg1))
core.lisp:(defcfun ("cv_Mat_sub" sub) (:pointer mat-expr)
types.lisp~:(defctype mat-expr :pointer)
vector.lisp:(defcfun ("std_vectormToCArray" %vector-mat-to-c-array) :pointer 
vector.lisp:		 ((and (pointerp arg) n (not i)) (mem-aref (%vector-mat-to-c-array arg) :pointer n))
vector.lisp:		 ((and (pointerp arg) n i) (mem-aref (mem-aref (%vector-mat-to-c-array arg) :pointer n) :float i))
